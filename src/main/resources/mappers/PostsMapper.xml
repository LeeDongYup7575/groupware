<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.projectdemo.domain.board.mapper.PostsMapper">

    <!-- 게시글 작성 -->
    <insert id="insertPost" parameterType="com.example.projectdemo.domain.board.dto.PostsDTO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO posts (
            emp_id,
            title,
            content,
            views,
            created_at,
            board_id
        ) VALUES (
                     #{empId},
                     #{title},
                     #{content},
                     #{views},
                     #{createdAt},
                     #{boardId}
                 )
    </insert>

    <!-- 게시글 목록 조회 -->
    <select id="getAllPosts" resultType="com.example.projectdemo.domain.board.dto.PostsDTO">
        SELECT
            p.id,
            p.title,
            p.emp_id AS empId,
            e.name AS author,
            p.views,
            p.board_id AS boardId,
            p.created_at AS createdAt
        FROM posts p
                 LEFT JOIN employees e ON p.emp_id = e.id
        ORDER BY p.id DESC
    </select>

    <!-- 게시글 상세 조회 -->
    <select id="getPostById" parameterType="int" resultType="com.example.projectdemo.domain.board.dto.PostsDTO">
        SELECT
            p.id,
            p.title,
            p.content,
            p.emp_id AS empId,
            e.name AS author,
            p.created_at AS createdAt,
            p.views,
            p.board_id AS boardId,
            b.name AS boardName
        FROM posts p
                 LEFT JOIN employees e ON p.emp_id = e.id
                 LEFT JOIN boards b ON p.board_id = b.id
        WHERE p.id = #{id}
    </select>


    <!-- 특정 게시판의 게시글 목록 조회 -->
    <select id="getPostsByBoardId" parameterType="Integer" resultType="com.example.projectdemo.domain.board.dto.PostsDTO">
        SELECT
            p.id,
            p.emp_id as empId,
            p.title,
            p.content,
            p.views,
            p.created_at as createdAt,
            p.board_id as boardId,
            b.name as boardName,
            e.name as author
        FROM
            posts p
                JOIN
            boards b ON p.board_id = b.id
                JOIN
            employees e ON p.emp_id = e.id
        WHERE
            p.board_id = #{boardId}
        ORDER BY
            p.created_at DESC
    </select>

    <!-- 특정 게시판의 게시글 목록을 최대 4개까지 조회 -->
    <select id="findTop4ByBoardId" parameterType="Integer"
            resultType="com.example.projectdemo.domain.board.dto.PostsDTO">
        SELECT p.id,
               p.emp_id     as empId,
               p.title,
               p.content,
               p.views,
               p.created_at as createdAt,
               p.board_id   as boardId,
               b.name       as boardName,
               e.name       as author
        FROM posts p
                 JOIN boards b ON p.board_id = b.id
                 JOIN employees e ON p.emp_id = e.id
        WHERE p.board_id = 13
        ORDER BY p.created_at DESC
        LIMIT 4
    </select>

    <!-- 게시판 ID로 게시글 수 조회 -->
    <select id="countPostsByBoardId" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM posts
        WHERE board_id = #{boardId}
    </select>

    <!-- 직원이 접근할 수 있는 모든 게시글을 게시판 이름과 작성자 정보를 포함하여 최신순으로 조회 -->
    <select id="getAccessiblePostsByEmpId" resultType="com.example.projectdemo.domain.board.dto.PostsDTO">
        SELECT p.*, b.name as boardName, e.name as author
        FROM posts p
                 JOIN boards b ON p.board_id = b.id
                 JOIN employees e ON p.emp_id = e.id
        WHERE (b.is_global = 1 OR p.board_id IN (SELECT board_id
                                                 FROM board_permissions
                                                 WHERE emp_id = #{empId}))
          AND b.is_active = 1
        ORDER BY p.created_at DESC
    </select>

    <!-- 게시글 수정 -->
    <update id="updatePost" parameterType="com.example.projectdemo.domain.board.dto.PostsDTO">
        UPDATE posts
        SET
            title = #{title},
            content = #{content},
            emp_id = #{empId}
        WHERE id = #{id}
    </update>

    <!-- 게시글 하드 삭제 쿼리 -->
    <delete id="deletePost" parameterType="int">
        DELETE FROM posts
        WHERE id = #{id}
    </delete>

    <!-- 내 게시글 조회 -->
    <select id="findPostsByEmpId" resultType="com.example.projectdemo.domain.board.dto.PostsDTO">
        SELECT
            posts.id,
            posts.emp_id AS empId,
            posts.title,
            posts.content,
            posts.views,
            posts.created_at AS createdAt,
            posts.board_id AS boardId,
            boards.name AS boardName
        FROM
            posts
                JOIN boards ON posts.board_id = boards.id
        WHERE
            posts.emp_id = #{empId}
        ORDER BY
            posts.created_at DESC
    </select>

    <!-- 게시글 다중 삭제 -->
    <delete id="deletePostsByIds">
        DELETE FROM posts
        WHERE id IN
        <foreach item="id" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <!-- 조회수 증가 -->
    <update id="incrementViewCount">
        UPDATE posts
        SET views = views + 1
        WHERE id = #{postId}
    </update>

</mapper>